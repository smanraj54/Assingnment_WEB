{"ast":null,"code":"var _jsxFileName = \"/Users/manrajsingh/Documents/Dal_Web_Lab/Lab2/tutorial3/src/Pages/SecondPage.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Container, Alert } from 'react-bootstrap'; // import reactDom from 'react-dom';\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar nameValidationPattern = new RegExp('^[a-zA-Z0-9]*$');\nvar passwordValidationPattern = new RegExp('^[a-zA-Z0-9$@_]*$');\nvar emailValidationPattern = new RegExp('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$');\n\nfunction SecondPage() {\n  _s();\n\n  const [emailValidation, setEmailValidation] = useState(false);\n  const [firstNameValidation, setFirstNameValidation] = useState(false);\n  const [lastNameValidation, setLastNameValidation] = useState(false);\n  const [passwordValidation, setPasswordValidation] = useState(false);\n  const [confirmPasswordValidation, setConfirmPasswordValidation] = useState(false);\n  const [completeValidation, setCompleteValidation] = useState(false);\n  const [passwordValue, setPasswordValue] = useState('');\n  const [confirmPasswordValue, setConfirmPasswordValue] = useState('');\n\n  const handleCompleteValidation = event => {\n    const flag = emailValidation || firstNameValidation || lastNameValidation || passwordValidation || confirmPasswordValidation;\n\n    if (flag) {\n      Alert(\"Please Check the Entered Values!!!\");\n    }\n  };\n\n  const handleConfirmPasswordValidation = event => {\n    setConfirmPasswordValue(event.target.value);\n    const flag = event.target.value === passwordValue;\n    setConfirmPasswordValidation(!flag);\n  };\n\n  const handlePasswordValidation = event => {\n    const flag = passwordValidationPattern.test(event.target.value) && event.target.value.length >= 7;\n    setPasswordValue(event.target.value);\n    console.log(flag);\n    console.log(event.target.value);\n    setPasswordValidation(!flag);\n\n    if (confirmPasswordValue) {\n      const flag2 = event.target.value === confirmPasswordValue;\n      setConfirmPasswordValidation(!flag2);\n    }\n  };\n\n  const handleFirstNameValidation = event => {\n    const flag = nameValidationPattern.test(event.target.value);\n    setFirstNameValidation(!flag);\n  };\n\n  const handleLastNameValidation = event => {\n    const flag = nameValidationPattern.test(event.target.value);\n    setLastNameValidation(!flag);\n  };\n\n  const handleEmailValidation = event => {\n    const flag = emailValidationPattern.test(event.target.value);\n    setEmailValidation(!flag);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        validated: completeValidation,\n        onSubmit: handleCompleteValidation,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formFirstName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"FirstName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            isInvalid: firstNameValidation,\n            onChange: handleFirstNameValidation,\n            type: \"text\",\n            placeholder: \"FirstName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"FirstName should be an alfhanumeric value!!! \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formLastName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"LastName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            isInvalid: lastNameValidation,\n            onChange: handleLastNameValidation,\n            type: \"text\",\n            placeholder: \"LastName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"LastName should be an alfhanumeric value!!! \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"EmailAddress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            isInvalid: emailValidation,\n            onChange: handleEmailValidation,\n            type: \"text\",\n            placeholder: \"UserName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"Enter Correct Email format !!!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            isInvalid: passwordValidation,\n            onChange: handlePasswordValidation,\n            value: passwordValue,\n            type: \"password\",\n            placeholder: \"Enter Unique Password!!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"Please Enter 7 Characters with special characters and capital letter in it\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formConfirmPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            isInvalid: confirmPasswordValidation,\n            onChange: handleConfirmPasswordValidation,\n            value: confirmPasswordValue,\n            type: \"password\",\n            placeholder: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"Password is not Matching!!!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SecondPage, \"HqwQaaRwvdv/5+m2T7fapOHGbsY=\");\n\n_c = SecondPage;\nexport default SecondPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SecondPage\");","map":{"version":3,"sources":["/Users/manrajsingh/Documents/Dal_Web_Lab/Lab2/tutorial3/src/Pages/SecondPage.js"],"names":["Form","Button","Container","Alert","React","useState","nameValidationPattern","RegExp","passwordValidationPattern","emailValidationPattern","SecondPage","emailValidation","setEmailValidation","firstNameValidation","setFirstNameValidation","lastNameValidation","setLastNameValidation","passwordValidation","setPasswordValidation","confirmPasswordValidation","setConfirmPasswordValidation","completeValidation","setCompleteValidation","passwordValue","setPasswordValue","confirmPasswordValue","setConfirmPasswordValue","handleCompleteValidation","event","flag","handleConfirmPasswordValidation","target","value","handlePasswordValidation","test","length","console","log","flag2","handleFirstNameValidation","handleLastNameValidation","handleEmailValidation"],"mappings":"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","sourcesContent":["import { Form, Button, Container, Alert} from 'react-bootstrap';\n// import reactDom from 'react-dom';\nimport React, {useState} from 'react';\n\nvar nameValidationPattern = new RegExp('^[a-zA-Z0-9]*$');\nvar passwordValidationPattern = new RegExp('^[a-zA-Z0-9$@_]*$');\nvar emailValidationPattern = new RegExp('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$');\n\nfunction SecondPage(){\n    \n    const [emailValidation, setEmailValidation] = useState(false);\n    const [firstNameValidation, setFirstNameValidation] = useState(false);\n    const [lastNameValidation, setLastNameValidation] = useState(false);\n    const [passwordValidation, setPasswordValidation] = useState(false);\n    const [confirmPasswordValidation, setConfirmPasswordValidation] = useState(false);\n    const [completeValidation, setCompleteValidation] = useState(false);\n    const [passwordValue, setPasswordValue] = useState('');\n    const [confirmPasswordValue, setConfirmPasswordValue] = useState('');\n    \n    const handleCompleteValidation = (event) => {\n        const flag = (emailValidation || firstNameValidation || lastNameValidation || passwordValidation || confirmPasswordValidation);\n        if(flag){\n            Alert(\"Please Check the Entered Values!!!\");\n        }\n        \n        \n    }\n    const handleConfirmPasswordValidation = (event) => {\n        setConfirmPasswordValue(event.target.value);\n        const flag  = event.target.value === passwordValue;\n        setConfirmPasswordValidation(!flag);\n\n    }\n    const handlePasswordValidation = (event) => {\n        const flag = (passwordValidationPattern.test(event.target.value) && event.target.value.length >= 7);\n        setPasswordValue(event.target.value);\n        console.log(flag);\n        console.log(event.target.value);\n        \n        setPasswordValidation(!flag);\n        if(confirmPasswordValue){\n            const flag2 = event.target.value === confirmPasswordValue;\n        setConfirmPasswordValidation(!flag2);\n    }\n\n    }\n    const handleFirstNameValidation = (event) => {\n\n        const flag = nameValidationPattern.test(event.target.value);\n        setFirstNameValidation(!flag);\n\n    }\n    const handleLastNameValidation = (event) =>{\n\n        const flag = nameValidationPattern.test(event.target.value);\n        setLastNameValidation(!flag);\n        \n    }\n    const handleEmailValidation = (event) =>{\n\n        const flag = emailValidationPattern.test(event.target.value);\n        setEmailValidation(!flag);\n        \n    }\n\n\n\n    \n    return (\n        <div>\n            <Container fluid>\n            <Form validated={completeValidation} onSubmit={handleCompleteValidation}>\n            <Form.Group controlId = \"formFirstName\">\n                    <Form.Label>\n                        FirstName\n                    </Form.Label>\n                    <Form.Control required isInvalid = {firstNameValidation} onChange = {handleFirstNameValidation} type=\"text\" placeholder=\"FirstName\"/>\n                    <Form.Control.Feedback type='invalid'>FirstName should be an alfhanumeric value!!! </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId = \"formLastName\">\n                    <Form.Label>\n                        LastName\n                    </Form.Label>\n                    <Form.Control required isInvalid = {lastNameValidation} onChange = {handleLastNameValidation} type=\"text\" placeholder=\"LastName\"/>\n                    <Form.Control.Feedback type='invalid'>LastName should be an alfhanumeric value!!! </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId = \"formEmail\">\n                    <Form.Label>\n                        EmailAddress\n                    </Form.Label>\n                    <Form.Control required isInvalid = {emailValidation} onChange = {handleEmailValidation} type=\"text\" placeholder=\"UserName\"/>\n                    <Form.Control.Feedback type='invalid'>Enter Correct Email format !!!!</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId = \"formPassword\">\n                    <Form.Label>\n                        Password\n                    </Form.Label>\n                    <Form.Control required isInvalid = {passwordValidation} onChange = {handlePasswordValidation} value = {passwordValue} type=\"password\" placeholder=\"Enter Unique Password!!!\"/>\n                    <Form.Control.Feedback type = 'invalid'>Please Enter 7 Characters with special characters and capital letter in it</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId = \"formConfirmPassword\">\n                    <Form.Label>\n                        Confirm Password\n                    </Form.Label>\n                    <Form.Control required isInvalid = {confirmPasswordValidation} onChange = {handleConfirmPasswordValidation} value = {confirmPasswordValue} type=\"password\" placeholder=\"Confirm Password\"/>\n                    <Form.Control.Feedback type='invalid'>Password is not Matching!!!!</Form.Control.Feedback>\n                </Form.Group>\n            </Form>\n            <Button>\n                Submit\n            </Button>\n            </Container>\n        </div>\n\n    );\n}\nexport default SecondPage;"]},"metadata":{},"sourceType":"module"}